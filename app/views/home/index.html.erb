<div class="col-sm-3">
    <div class="panel panel-default">
        <div class="panel-heading">
            <div id="imaginary_container">
                <div class="input-group stylish-input-group">
                    <input type="text" class="form-control" id="searchTweet" placeholder="Search Trending Topics">
                </div>

            </div>
        </div>
    <div class="panel-body">
        <div class="panel panel-primary">
            <div class="panel-body">

                <div id="tweet"></div>

            </div>
        </div>
    </div>
  </div>
</div>

<div class="col-sm-9">
    <div>

        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation"  class="active">
                <a href="#profile" aria-controls="profile" role="tab" data-toggle="tab">Buble Chart</a>
            </li>
            <li role="presentation">
                <a href="#mapid" aria-controls="home" role="tab" data-toggle="tab">Trending Map</a>
            </li>
            <li role="presentation">
                <a href="#messages" aria-controls="messages" role="tab" data-toggle="tab">Bar Chart</a>
            </li>
        </ul>

        <!-- Tab panes -->
        <div class="tab-content">
            <div role="tabpanel" class="tab-pane fade in active" id="profile">
              <%= select("trend", "location", @cities) %>
              <div>
                <div class='slider-value'>
                  -12
                </div>
                <input type="text" class="slider" value="-24" data-slider-min="-24" data-slider-max="1" data-slider-step="1" data-slider-value="-12" data-slider-orientation="horizontal" data-slider-selection="after"data-slider-tooltip="hide">
              </div>
              <div class='bubble-chart'>
              </div>
            </div>
            <div role="tabpanel" class="tab-pane fade" id="mapid"></div>




            <div role="tabpanel" class="tab-pane fade" id="messages">


              <%= select("trend", "location", Trend.all.pluck(:location).uniq) %>
              <% trends = Trend.all.pluck(:created_at).map { |t| t.to_datetime.to_s.slice(0, 16) } %>
              <%= select("trend", "created_at", trends.uniq) %>

<div class="col-sm-9">

<div>



    <!-- Tab panes -->
    <div class="tab-content">

        <div role="tabpanel" class="tab-pane fade" id="messages">

            <!-- <h2>Hello d33</h2> -->

            <%= select("trend", "location", Trend.all.pluck(:location).uniq) %>
            <% trends = Trend.all.pluck(:created_at).map { |t| t.to_datetime.to_s.slice(0, 16) } %>
            <%= select("trend", "created_at", trends.uniq) %>

            <script src="//d3js.org/d3.v3.min.js"></script>

            <script>

                $("#trend_location").change(updateData);
                $("#trend_created_at").change(updateData);
                // When #trend_created_at is changed Call a function, using AJAX ask for tweets that are roughly around that time
                var city;
                var dataSet;
                var sortedData = [];
                var only1SetOfData = [];
                var maxTweet;

                function updateData() {

                    d3.selectAll("svg > *").remove();
                    d3.select("svg").remove();
                    d3.select("text").remove();
                    d3.select("g").remove();

                    city = $("#trend_location").val();
                    dataSet = $("#trend_created_at").val();

                    var outerWidthB = 1280;
                    var outerHeightB = 700;
                    var margin = {
                        left: 180,
                        top: 30,
                        right: 100,
                        bottom: 100
                    };
                    var barPadding = 0.2;

                    var innerWidth = outerWidthB - margin.left - margin.right;
                    var innerHeight = outerHeightB - margin.top - margin.bottom;

                    var svg = d3.select("#messages").append("svg").attr("width", outerWidthB).attr("height", outerHeightB);

                    var g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    var xAxisG = g.append("g").attr("class", "x axis").attr("transform", "translate(0," + innerHeight + ")");

                    var yAxisG = g.append("g").attr("class", "y axis");

                    var xScale = d3.scale.linear().range([0, innerWidth]);
                    var yScale = d3.scale.ordinal().rangeBands([
                        0, innerHeight
                    ], barPadding);

                    var xAxis = d3.svg.axis().scale(xScale).orient("bottom").ticks(5). // Use approximately 5 ticks marks.
                    tickFormat(d3.format("s")). // Use intelligent abbreviations, e.g. 5M for 5 Million
                    outerTickSize(0); // Turn off the marks at the end of the axis.
                    var yAxis = d3.svg.axis().scale(yScale).orient("left").outerTickSize(0); // Turn off the marks at the end of the axis.

                    d3.json("/trends.json?location=" + city, function (datass) {

                        only1SetOfData = [];

                        for (var i = 0; i < datass.length; i++) {
                            if (datass[i].created_at.includes(dataSet) === true) {
                                only1SetOfData.push(datass[i]);
                            }
                        };

                        sortedData = only1SetOfData.sort(function (a, b) {
                            return parseFloat(b.value) - parseFloat(a.value);
                        });

                        maxTweet = sortedData[0].value;

                        xScale.domain([0, maxTweet]);
                        yScale.domain(sortedData.map(function (d) {
                            return d.name;
                        }));

                        xAxisG.call(xAxis);
                        yAxisG.call(yAxis);

                        var bars = g.selectAll("rect").data(sortedData);
                        bars.enter().append("rect").attr("height", yScale.rangeBand());

                        bars.attr("x", 0).attr("y", function (d) {
                            return yScale(d.name);
                        }).attr("width", function (d) {
                            return xScale(d.value);
                        }).attr("class", "bars");

                        bars.enter().append("text").text(function (d) {
                            return d.value;
                        }).attr("x", function (d) {
                            return xScale(d.value);
                        }).attr("y", function (d) {
                            return yScale(d.name) + margin.top - yScale.rangeBand() / 2.2;
                        });

                        var xAxisLabelText = city + " " + dataSet;
                        var xAxisLabelOffset = 75;

                        var xAxisLabel = xAxisG.append("text").style("text-anchor", "middle").attr("x", innerWidth / 2).attr("y", xAxisLabelOffset).attr("class", "label").text(xAxisLabelText);

                    })
                };
            </script>

            <script>


            //
            //






var mymap = L.map('mapid').setView([-37.83148, 144.88083], 8);


L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
    // attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
    maxZoom: 8,
    id: 'donnzh.0eof43al',
    accessToken: 'pk.eyJ1IjoiZG9ubnpoIiwiYSI6ImNpcG5rYTRxZTAwMTJ0cm5nZXB0d3lpNGgifQ.UFGuf2VLMfHzWwAf_fjMUQ'
}).addTo(mymap);

            // var popup = L.popup();
            //
            // function onMapClick(e) {
            //     popup
            //         .setLatLng(e.latlng)
            //         .setContent("You clicked the map at " + e.latlng.toString())
            //         .openOn(mymap);
            // }
            //
            // mymap.on('click', onMapClick);



            // var LeafIcon = L.Icon.extend({
            //     options: {
            //         shadowUrl: 'leaf-shadow.png',
            //         iconSize:     [38, 95],
            //         shadowSize:   [50, 64],
            //         iconAnchor:   [22, 94],
            //         shadowAnchor: [4, 62],
            //         popupAnchor:  [-3, -76]
            //     }
            // });
            //
            // var greenIcon = new LeafIcon({iconUrl: 'leaf-green.png'}),
            //     redIcon = new LeafIcon({iconUrl: 'leaf-red.png'}),
            //     orangeIcon = new LeafIcon({iconUrl: 'leaf-orange.png'});
            //
            //     L.marker([-33.8688, 151.2193], {icon: greenIcon}).addTo(mymap).bindPopup("I am a green leaf.");
            //     L.marker([-33.8600, 151.2093], {icon: redIcon}).addTo(mymap).bindPopup("I am a red leaf.");
            //     L.marker([-33.8588, 151.2093], {icon: orangeIcon}).addTo(mymap).bindPopup("I am an orange leaf.");
            //
            //


            // var myLines = [{
            //     "type": "LineString",
            //     "coordinates": [[-100, 40], [-105, 45], [-110, 55]]
            // }, {
            //     "type": "LineString",
            //     "coordinates": [[-105, 40], [-110, 45], [-115, 55]]
            // }];
            //
            // var myStyle = {
            //     "color": "#ff7800",
            //     "weight": 5,
            //     "opacity": 0.65,
            //     "text": "hello"
            // };
            //
            // L.geoJson(myLines, {
            //     style: myStyle
            // }).addTo(mymap);


            //
            // var geojsonFeature = {
            //     "type": "Feature",
            //     "properties": {
            //         "name": "Coors Field",
            //         "amenity": "Baseball Stadium",
            //         "popupContent": "This is where the Rockies play!"
            //     },
            //     "geometry": {
            //         "type": "LineString",
            //             "coordinates": [[-105, 40], [-110, 45], [-115, 55]]
            //     }
            // };
            //
            // L.geoJson(geojsonFeature).addTo(mymap);



            //     var states = [{
            //         "type": "Feature",
            //         "properties": {"party": "Republican"},
            //         "geometry": {
            //             "type": "Polygon",
            //             "coordinates": [[
            //                 [-104.05, 48.99],
            //                 [-97.22,  48.98],
            //                 [-96.58,  45.94],
            //                 [-104.03, 45.94],
            //                 [-104.05, 48.99]
            //             ]]
            //         }
            //     }, {
            //         "type": "Feature",
            //         "properties": {"party": "Democrat"},
            //         "geometry": {
            //             "type": "Polygon",
            //             "coordinates": [[
            //                 [-109.05, 41.00],
            //                 [-102.06, 40.99],
            //                 [-102.03, 36.99],
            //                 [-109.04, 36.99],
            //                 [-109.05, 41.00]
            //             ]]
            //         }
            //     }];
            //
            //     L.geoJson(states, {
            //         style: function(feature) {
            //             switch (feature.properties.party) {
            //                 case 'Republican': return {color: "#ff0000"};
            //                 case 'Democrat':   return {color: "#0000ff"};
            //             }
            //         }
            //     }).addTo(mymap);
            //
            //
            //
            //
            //     function onEachFeature(feature, layer) {
            //     // does this feature have a property named popupContent?
            //     if (feature.properties && feature.properties.popupContent) {
            //         layer.bindPopup(feature.properties.popupContent);
            //     }
            // }
            //
            // var geojsonFeature = {
            //     "type": "Feature",
            //     "properties": {
            //         "name": "Coors Field",
            //         "amenity": "Baseball Stadium",
            //         "popupContent": "This is where the Rockies play!"
            //     },
            //     "geometry": {
            //         "type": "Point",
            //         "coordinates": [-104.99404, 39.75621]
            //     }
            // };
            //
            // L.geoJson(geojsonFeature, {
            //     onEachFeature: onEachFeature
            // }).addTo(mymap);


            // var point = L.point(200, 300);

            //
            // var myIcon = L.divIcon({
            //   className: 'my-div-icon',
            // //  // Set class for CSS styling
            //                 html: 'ATextLabel',
            //                 iconSize:[80 , 20],
            //                 iconAnchor:[0,0]
            //
            //
            // } );

            //
            // var myIcon2 = L.divIcon({
            //   className: 'my-div-icon',
            // //  // Set class for CSS styling
            //                 html: 'A2TextLabel',
            //                 iconSize:null,
            //                 iconAnchor:[0,0]
            //
            //
            //
            // } );
            //
            // var myIcon3 = L.divIcon({
            //   className: 'my-div-icon',
            // //  // Set class for CSS styling
            //                 html: 'AText333Label',
            //                  iconSize:null,
            //                  iconAnchor:[0,0]
            //
            //
            //
            // } );


            var collisionLayer = L.layerGroup.collision({
                margin: -8
            });

            // collisionLayer.add( L.marker() );

            // you can set .my-div-icon styles in CSS

            var sydLatLng = [-33.8688, 151.2093];
            var melLatLng = [-37.83148, 144.88083];
            var adeLatLng = [-34.92647, 138.58154];
            var briLatLng = [-27.47416, 153.01758];

            //sydney
            // var sydLatLng2 = [-33.8688, 151.0093];
            // var sydLatLng3 = L.latLngBounds(sydLatLng, sydLatLng2);
            //
            // var textLatLng3 = [-33.8688, 151.2093];

            // var textLatLng4 = [51.509, -0.01];



            var sizeTest = function(num) {
                if (num > 500000) {
                    return 'my-div-icon1'
                } else if (num > 50000 && num < 500000) {
                    return 'my-div-icon2'
                } else if (num > 10000 && num < 50000) {
                    return 'my-div-icon3'
                }
            };

            var locationTest = function(city) {
                var cityName = city.toLowerCase()
                if (cityName === 'sydney') {
                    return sydLatLng
                } else if (cityName === 'melbourne') {
                    return melLatLng
                } else if (cityName === 'adelaide') {
                    return adeLatLng
                } else if (cityName === 'brisbane') {
                    return briLatLng
                }
            }

            var zoom8

            var uniqLocation = _.uniq(_.pluck(data, 'location'))

            var dataByLocation = []

            for (i = 0; i < uniqLocation.length; i++) {
                dataByLocation.push(_.where(data, {
                    location: uniqLocation[i]
                }))
            }


            console.log(uniqLocation)

            // var anchorX = 0
            // var anchorY = -100
            var mark = []

            // for (i = 0; i < dataByLocation.length; i++) {
            //
            //   var anchorX = 0
            //   var anchorY = -100
            //   mark[i] = []
            //
            //   for (j=0; j< dataByLocation[i].length; j ++) {
            //
            //
            //     anchorX += (dataByLocation[i][j].name.length * 10)
            //     if (j % 3 == 0) {
            //         anchorY += 40;
            //         anchorX = 0;
            //     }
            //
            //     mark[i][j] = L.marker(locationTest(dataByLocation[i][j].location), {
            //         icon: L.divIcon({
            //
            //             className: sizeTest(dataByLocation[i][j].value),
            //             //  // Set class for CSS styling
            //             html: dataByLocation[i][j].name,
            //             iconSize: null,
            //             iconAnchor: [anchorX, anchorY]
            //         }),
            //         draggable: true, // Allow label dragging...?
            //         zIndexOffset: 1000,
            //     })
            // }
            //
            // var zoom8 = L.featureGroup(mark[i]);
            // zoom8.addTo(mymap);
            // }


            //
            var zoom8;
            var zoom = {
                8: {
                    anchorX: 0,
                    anchorY: -100,
                    addXnum: 40,
                    addYnum: 0
                },
                7: {
                    anchorX: 0,
                    anchorY: -80,
                    addXnum: 20,
                    addYnum: 0,

                },
                6: {
                    anchorX: 0,
                    anchorY: -60,
                    addXnum: 10,
                    addYnum: 0,

                },
                5: {
                    anchorX: 0,
                    anchorY: -50,
                    addXnum: 20,
                    addYnum: 0,

                },
                4: {
                    anchorX: 0,
                    anchorY: -50,
                    addXnum: 20,
                    addYnum: 0,

                },
                3: {
                    anchorX: 0,
                    anchorY: -40,
                    addXnum: 20,
                    addYnum: 0,

                },
                2: {
                    anchorX: 0,
                    anchorY: -30,
                    addXnum: 20,
                    addYnum: 0,

                },
                1: {
                    anchorX: 0,
                    anchorY: -10,
                    addXnum: 20,
                    addYnum: 0,

                },
                0: {
                    anchorX: 0,
                    anchorY: -10,
                    addXnum: 20,
                    addYnum: 0,

                }


            }
            mymap.on('zoomend', onZoomend);

            function onZoomend() {
                // debugger;
                mymap.eachLayer(function (layer) {
                  if (layer._leaflet_id != "35")
                  mymap.removeLayer(layer);
                });



                for (i = 0; i < dataByLocation.length; i++) {
                    // var xAdd = zoom[mymap.getZoom()].
                    var anchorX = zoom[mymap.getZoom()].anchorX
                    var anchorY = zoom[mymap.getZoom()].anchorY
                    mark[i] = []

                    for (j = 0; j < dataByLocation[i].length; j++) {


                        anchorX += (dataByLocation[i][j].name.length * 10)
                        if (j % 3 == 0) {
                            anchorY += zoom[mymap.getZoom()].addXnum;
                            anchorX = zoom[mymap.getZoom()].addYnum;
                        }

                        mark[i][j] = L.marker(locationTest(dataByLocation[i][j].location), {
                            icon: L.divIcon({

                                className: sizeTest(dataByLocation[i][j].value),
                                //  // Set class for CSS styling
                                html: dataByLocation[i][j].name,
                                iconSize: null,
                                iconAnchor: [anchorX, anchorY]
                            }),
                            draggable: true, // Allow label dragging...?
                            zIndexOffset: 1000,
                        })
                    }

                    zoom8 = L.layerGroup(mark[i]);
                    zoom8.addTo(mymap);
                }
            }
            onZoomend();
            </script>

        </div>
    </div>

</div>
</div>
<div id="app"></div>

<!-- Template that insert the tweets on the side pane -->

<script id="insertTweets" type="html/template">
<li><%%= tweets %></li>
</script>

<script id="appViewTweets" type="html/template">
<ul id="twid"></ul>
</script>

<script src="//d3js.org/d3.v3.min.js"></script>
<script>
var slider = $('.slider').slider();
slider.on('slide', function() {
  $('.slider-value').text(slider.slider('getValue').val());
});

slider.on('slideStop', function() {
  updateData();
});

// console.log('value:', $('.slider').value())
// Document.find_by_class('Sydney').change Font color to (color('Sydney'))
updateData();

$("#trend_location").change(updateData);


function updateData() {
  var trend_location = $("#trend_location").val();
  var time_gap = slider.slider('getValue').val();

  var diameter = 800,
      format = d3.format(",d"),
      color = d3.scale.category20c();

  var bubble = d3.layout.pack()
      .sort(null)
      .size([diameter, diameter])
      .padding(1.5);

  console.log("/trends.json?location=" + trend_location + "&time_gap="+time_gap);

  d3.json("/trends.json?location=" + trend_location + "&time_gap="+time_gap, function(error, root) {
    if (error) throw error;

    if(root.length > 0) {
      d3.select("svg").remove();

      var svg = d3.select(".bubble-chart").append("svg")
        .attr("width", diameter)
        .attr("height", diameter)
        .attr("class", "bubble");
      var data = {children: root};

      var node = svg.selectAll(".node")
          .data(bubble.nodes(data))
        .enter().append("g")
          .attr("class", "node")
          .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

      node.append("title")
          .text(function(d) {
            return d.name + ": " + format(d.value);
          });

      node.append("circle")
          .attr("r", function(d) { return d.r; })
          .style("fill", function(d) {
            return color(d.location);
          });

      node.append("text")
          .attr("dy", ".1em")
          .attr("font-size", "0.7em")
          .style("text-anchor", "middle")
          .text(function(d) {
            return d.name;
          });
    }
  });

  d3.select(self.frameElement).style("height", diameter + "px");


}

</script>
